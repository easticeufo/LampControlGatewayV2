ESP(1)                           User Commands                          ESP(1)



NAME
       esp - ESP Application Generator for Server-Side Web Applications.

SYNOPSIS
       esp  [--chdir  dir]]  [--config  configFile]] [--database DB]] [--debug
       DB]] [--genlink filename] [--keep]  [--listen  [ip:]port]  [--log  log-
       File:level]  [--mode  [debug|release]  [--name  appName]  [--overwrite]
       [--quiet] [--platform  [path/]os-arch-profile]  [--rebuild]  [--release
       DB]]  [--routeName  name]  [--routePrefix  prefix]  [--show] [--single]
       [--static] [--table name] [--verbose] [--why] commands ...


       Commands:
        esp clean
        esp compile [pathFilters...]
        esp generate controller name [action [, action] ...]
        esp generate migration description model  [field:type  [,  field:type]
       ...]
        esp generate scaffold model [field:type [, field:type] ...]
        esp generate table name model [field:type [, field:type] ...]
        esp install paks...
        esp list
        esp migrate [forward|backward|NNN]
        esp run
        esp uninstall paks...
        esp upgrade paks...

DESCRIPTION
       The  esp  command generates, manages and runs ESP web applications.  It
       can generate ESP web applications, controllers,  database  tables,  and
       scaffolds.

       The  esp command will create directories and generate configuration and
       source code files that can then be manually edited as required.  Esp is
       intelligent  and  will  not overwrite existing files, so you can safely
       edit and regenerate without losing your changes. You can overwrite your
       changes if you wish to by using the --overwrite switch.

       Esp can run your application by invoking a configured web server.

GENERATING APPLICATIONS
       To start a new web application, create a directory and change into that
       directory. The directory name must be a valid C identifier  name.  Then
       run esp to install the desired packs. For example:

             kdir blog
             d blog
             esp install esp-html-mvc

       This  will  will  create  a set of directories which have the following
       meaning:

             client         - Public client web content
             client/assets  - Images and assets
             client/css     - Client CSS and Less style sheets
             client/lib     - Client side Javascript libraries
             db             - Databases and scripts
             src            - Application source code

       Other directories will be created as needed:
             cache          - Cache directory for compiled content
             db/migrations  - Databases migration modules
             controllers    - Server side controllers
             src            - Server side main source code

       Most of these directories are initially empty, but  may  be  used  over
       time.  ESP  follows  conventions  where specific files are stored. This
       greatly simplifies configuring a web application.

       Esp will also create some files which have the following meaning:

             app.config     - Appweb configuration file for hosting app
             appweb.config  - Stand-alone Appweb configuration file
             index.esp      - Home web page
             start.me       - MakeMe build file

       The esp command can generate various functionality by specifying exten-
       sion packs on the command line.

             esp install [packs...]

       Packs  are modules of functionality for generated applications that are
       described by their package.json file. Packs may depend on  other  packs
       so  that  generating  the  top  level  pack may generate other required
       packs. For example: generating the  "esp-angular-mvc"  pack  will  also
       generate: esp-angular, angular, less and more.

       Other packs are:

             angular               - Angular client-side framework
             esp-angular           - ESP for Angular
             esp-angular-mvc       - ESP MVC appplications for Angular
             esp-server            - Default ESP server-side configuration
             less                  - CSS pre-processor for the Less stylesheet
             more                  - Collection of CSS polyfills


GENERATING MIGRATIONS
       Migrations are generated code modules that manage portions of the data-
       base.  Migrations  are used to create tables, initialize with test data
       and optionally destroy tables. Migrations are typically  generated  and
       then  hand-edited  to  include  relevant  initialization  or test data.
       Migrations are  useful  to  quickly  recreate  the  database  with  the
       required tables and data.

             esp generate migration DESCRIPTION TABLE [field:type ...]

       The  DESCRIPTION  is used to name the migration which is created in the
       db/migrations directory. A migration is given a unique ordered sequence
       number  and the description is appended to this number. The description
       is mapped where spaces are changed to "_" characters.  When  migrations
       are run, they are run in sequence number order.

       If  field:type values are supplied, the database migration will include
       code to create a column for each specified field of the requested type.
       The  valid  database  types  are:  blob, boolean, date, float, integer,
       string, and text.


GENERATING TABLES
       To generate a database table without creating a migration:

             esp generate table TABLE [field:type ...]


GENERATING CONTROLLERS
       Controllers  are  the  primary  mechanism  for  responding  to   client
       requests.  To generate a controller, run:

             esp generate controller NAME [actions...]

       This  will  create a controller of the requested name. It will create a
       controller source file in the controllers directory.  If  action  names
       are  requested,  the controller source will define an action method for
       each name. You can edit the controller source to meet  your  needs.  It
       will not be overwritten unless you specify the --overwrite switch.


GENERATING SCAFFOLDS
       A  scaffold  is a generated controller, database migration, client-side
       controller and set of views that provides add, edit and list  function-
       ality for the database table.  Scaffolds are useful to quickly generate
       chunks of the application and prototype web pages and actions for  man-
       aging a database table.  To generate a scaffold:

             esp generate scaffold MODEL [field:type ...]

       This  will  create a scaffold for the specified database table and will
       generate a controller of the same name.

       If field:type values are supplied, a database migration will be created
       with  code to create a column for each specified field of the requested
       type. The valid database types are: blob, boolean, date,  float,  inte-
       ger,  string,  and  text. The migration will use the name "create_scaf-
       fold_MODEL" and will be created under the db/migrations direcvtory.

       The scaffold will include an edit action and view  page  that  provides
       add and edit capability. The list action and view, provides the ability
       to list the table rows and select an entry to edit.

       If the --singleton switch is ues, the controller will be generated  for
       a singleton resource and will not have a list action.


COMPILING
       Esp  compiles  controllers  and ESP pages native code shared libraries.
       These are then loaded and run by ESP in  response  to  incoming  client
       requests.  Code is compiled only once but can be run many times to ser-
       vice incoming requests.

       In development mode, ESP will automatically compile the  relevant  por-
       tions  of the application if the source code is modified. It can intel-
       ligently recompile controllers and ESP pages.  However,  you  can  also
       explicilty  recompile  portions  or the complete appliction via the esp
       command.

       Esp can recompile everything via:

             esp compile ....

       This will re-compile all ESP pages  and  MVC  applications  for  routes
       defined in the appweb.conf file.

       Esp  also  provides options for you to individually compile controllers
       and ESP pages. To recompile named pages or controllers:

             esp compile path/*.esp....

            The arguments after "compile"  are  pathname  filters.  These  are
            resolved  relative  to  the current directory. Only items matching
            the filter pathnames are compiled.


       To compile the entire application and produce a single combined  shared
       library file, set the "esp.combo" to true in the package.json file.


CROSS-COMPILING
       To  compile  for  a target system of a different architecture, you must
       specify the target.  To do this, use the -platform  switch  to  specify
       the  target architecture. Specify the path to the platform directory in
       the Appweb source code built for that platform.

            esp -platform /home/dev/linux-arm-debug compile


RUNNING
       To run your application:

             esp run

CLEANING
       To clean all generated module files:
             esp clean


MIGRATIONS
       Migration files can be run via the esp migrate command. With  no  other
       parameters,  the command will run all migrations that have not yet been
       applied to the database. You can also use esp migrate forward to  apply
       apply the next unapplied migration. Similarly esp migrate backward will
       reverse the last applied migration. You can also use esp migrate NNN to
       migrate  forward  or backward to a specific migration, where NNN is the
       migration sequence number at the start of the migration file name.


PAKS
       Esp can install, uninstall and manage extension packages called "paks".
       To install a pak:

            esp install PakName

       To list installed paks:

            esp list

       To remove a pak:

            esp remove PakName

       Use  the  Pak  utility from http://embedthis.com/products/pak/ for more
       extensive  Pak   management.    See   the   online   Pak   catalog   at
       http://embedthis.com/catalog for a list of available Paks.


COMMANDS
       esp has the following command usage patterns:

             esp clean
             esp compile controllers name
             esp compile path/*.esp
             esp generate controllers name [action [, action] ...]
             esp generate scaffold model [field:type [, field:type] ...]
             esp generate table name model [field:type [, field:type] ...]
             esp install paks...
             esp list
             esp migrate [forward|backward|NNN]
             esp run
             esp uninstall paks...
             esp upgrade paks...


OPTIONS
       --chdir dir
             Change the current working directory before beginning processing.

       --config configFile
             Use the specified config file instead of appweb.conf

       --database Database provider
             Use the specified database provider. Set to "mdb"  or  "sdb"  for
             SQLite.

       --debug
             Compile source with debug symbols.

       --genlink slink.c
             Generate  a  static  link  initialization  file for ESP pages and
             applications.  This is used with --static to generate  a  appweb-
             StaticInitialize()  function  that will invoke all ESP initializ-
             ers.   By  default,  appweb   expects   this   to   be   in   the
             src/server/slink.c file.

       --keep
             Keep intermediate source files in the cache directory. This over-
             rides the EspKeepSource setting in the appweb.conf file.

       --listen [ip:]port
             Define the listening endpoint address. This  will  be  used  when
             generating  an  application.  The  value will be patched into the
             generated appweb.conf configuration file.

       --log logFile:level
             Specify a file to log  messages.   The  syntax  is:  "--log  log-
             Name[,moduleName][:logLevel]".   Level  3  will trace the request
             and response headers.

       --overwrite
             Overwrite existing files.  Ejsweb  normally  will  not  overwrite
             existing  files.  This  is to preserve user changes to previously
             generated files.

       --quiet
             Suppress diagnostic trace to the console.

       --platform [path/]os-arch-profile
             Target platform configuration to build for and directory contain-
             ing  appweb  objects and libraries for the target platform.  If a
             path is supplied, the specified platform directory is used.  Oth-
             erwise,  esp  searches  from  the current directory upwards for a
             parent platform directory.

       --rebuild
             Force a recompile of all items when used with  the  compile  com-
             mand.   When  used  with migrate, this will recreate the database
             and apply all migrations.

       --release
             Compile source in release  mode  with  optimization  and  without
             debug symbols.

       --reverse
             Reverse the application of migrations.

       --routeName name
             This  selects  the Appweb route by name that will be used for the
             ESP configuration. Routes can be given an explicit name  via  the
             "Name" appweb.conf directive. Otherwise routes are named by their
             route pattern.

       --routePrefix prefix
             This selects the Appweb route by prefix that will be used for the
             ESP configuration. Routes can be given an explicit prefix via the
             "Prefix" appweb.conf directive. If  the  route  prefix  does  not
             match,  the  first portion of the route pattern is tested against
             the requested prefix.

       --show
             Show commands being executed to the console.

       --single
             Generate a controller for a singleton resource instead of a group
             of resources. A singleton controller omits a list action.

       --static
             Use  static  linking  when building ESP applications. This causes
             esp to create archive libraries instead of shared libraries.

       --table name
             Override the database table name when generating  tables,  migra-
             tions or scaffolds. This is useful to request a plural version of
             the model name. Alternatively, specify the model name when gener-
             ating  the  scaffold,  table or migration with the desired plural
             suffix. For example: "-s" or "-ies".

       --verbose or -v
             Run in verbose mode and trace actions to the console.

       --why or -w
             Explain why a resource was or was not compiled.


REPORTING BUGS
       Report bugs to dev@embedthis.com.


COPYRIGHT
       Copyright (C) Embedthis Software.  ESP  is  a  trademark  of  Embedthis
       Software.


SEE ALSO
       appweb



esp                              November 2014                          ESP(1)
