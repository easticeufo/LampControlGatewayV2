/*
    start.me -- Appweb SSL certificate generation
 
    This file provides targets to help you get going with SSL (using OpenSSL). 
    WARNING: All these certificates are for internal use only.

    To generate a certificate request to send to a certificate authority like Verisign, do:
    This will create a certificate request file in "server.csr" and a private key in "server.key"

        me request
 
    To use appweb with HTTP, you need a server certificate. 
    This command will generate a self-signed test certificate called "self.crt" with a private key "self.key".
 
        me selfSigned
 
    To create a CA and then a server cert based on this CA, do:
    This command will generate a CA certificate in ca.crt with a CA private key in ca.key. The last minted certificate
    serial number is in ca.srl.
 
        me ca

    To generate a certificate signed by the test CA, do:
    This will generate a certificate in "test.crt" with a private key in "test.key".
        me cert

    For all cert targets:

        me certs
 */

Me.load({

    targets: {
        certs: {
            depends: ['ca', 'self', 'cert', 'request'],
        },

        /*
            WARNING: Self-signed server certificate for testing ONLY.
            Use a self-signed certificate when you just want quick and dirty testing.
            The browser will say it doesn't recognize this certificate, but that is ok for testing only.
            Creates a private key in self.key.

            See: http://www.sslshopper.com/article-most-common-openssl-commands.html
         */
        self: {
            shell: "
                umask 77
                openssl genrsa -out self.key 2048
                openssl req -new -x509 -days 1095 -key self.key -out self.crt < self.ans
            ",
        },

        /*
             Setup a test certificate authority. Use this if you will be generating multiple certificates for clients and 
             servers.  NOTE: this is only for test. The certificate authority is not a real entity!
         */
        ca: {
            shell: "
                umask 77 ; OPENSSL_CONF=openssl.ca ; export OPENSSL_CONF
                openssl genrsa -out ca.key 2048
                openssl req -new -x509 -key ca.key -out ca.crt
                echo '01' >ca.srl
                >ca.db
            ",
        },

        /*
            Test cert signed by the test CA above. This is used for test as the server cert and on the client side
            when validating client certs.
         */
        cert: {
            shell: "
                umask 77 ; OPENSSL_CONF=openssl.conf ; export OPENSSL_CONF
                rm -f test.crt test.key
                openssl genrsa -out test.key 2048
                openssl req -new -key test.key -out test.csr < test.ans
                OPENSSL_CONF=openssl.ca openssl x509 -req -in test.csr -CA ca.crt -CAkey ca.key -out test.crt
            ",
        },

        /*
            Generate a certificate request to send to a certificate authority like Verisign
            Generates a server key in "server.key"
         */
        request: {
            shell: "
                umask 77 ; OPENSSL_CONF=openssl.conf ; export OPENSSL_CONF
                openssl genrsa -out server.key 2048
                openssl req -new -key server.key -out server.csr < test.ans
            ",
        },
    },
})

