#
#   appweb.conf -- Complete Configuration for the Embedthis Appweb HTTP Server
#   
#   This file shows most of the Appweb configuration directives. You do not need
#   all directives and most have sensible defaults. Consult the typical-server
#   sample for a smaller appweb.conf configuration file.
#
#   This configuration file controls the operation of the Appweb server. The 
#   order of configuration directives matters as this file is parsed only once.
#   You must put the server root and error log definitions first to ensure 
#   configuration errors are logged.
#

#
#   Server home directory for Appweb to find configuration files. 
#   Appweb will change directory to this location when it runs.
#
Home "."

#
#   Define the logging configuration first so any errors are logged.
#   This is for errors and debug trace. This log file is for the whole
#   server including virtual hosts. Add a timestamp every 1 hour.
#
ErrorLog "error.log" size=10MB level=2 backup=5 append anew stamp=1hr

#
#   Control the tracing of request and response requests to the error log.
#   This directive defines the levels at which various events are logged.
#
#   Log rx conn=5 first=2 headers=3 body=5 limits=5 size=10K
#   Log tx first=3 headers=3 body=5 limits=5 time=6 size=10K exclude="jpg,gif,png,ico,css,js"

#
#   Per-request server access log
#
#   AccessLog "access.log" size=10MB backup=5 append anew

#
#   The user name and group to become. The fake name APPWEB will change
#   user/group to the Appweb default user/group if running as root/adminstrator.
#   This is www on MAC, nobody/nogroup on Linux, and administrator on Windows. 
#   The fake name _unchanged_ means don't change the user or group. 
#   NOTE: ESP and EJS require write access to the cache directory If you wish to 
#   backup log files, you must have write permission to the log file directory. 
#
GroupAccount APPWEB
UserAccount APPWEB

#
#   Bind Appweb to listen for incoming requests on this address. Formats 
#   include (IP, IP:PORT, PORT). If an IP address is omitted, Appweb will 
#   listen on all interfaces. If a port is omitted, then port 80 is used.
#   If the O/S has a dual-stack network, then connections on both IPv4 
#   and IPv6 will be accepted. Use [::]:port to explicitly listen to only
#   IPv6 requests. [::1] is the IPv6 loopback. Use 0.0.0.0:port to listen
#   to only IPv4 requests.
#
Listen 8080

#
#   SSL/TLS configuration
#
#   <if SSL_MODULE>
#       LoadModule sslModule libmod_ssl
#       ListenSecure 443
#       #
#       #   SECURITY NOTE: you must generate the server.crt and server.key.pem. 
#       #   Use a decrypted key here so it won't prompt for the password when 
#       #   the server is restarted. 
#       #
#       SSLCertificateFile "server.crt"
#       SSLCertificateKeyFile "server.key.pem"
#   </if>
#
#   Name of the server to use for redirects and error responses to clients. 
#   Uncomment this line and replace it with the public name of your server. 
#   This host name and port do not get used for listening on sockets. If 
#   unspecified, Appweb will use the IP address for the host name.
#   NOTE: Only define a ServerName if you are not using a ListenSecure
#   directive for SSL. Otherwise, redirects will always go to the address
#   you define here regardless of http or https. If you need to use a 
#   ServerName with SSL, use a VirtualHost to define your SSL endpoint.
#
#   ServerName http://example.com

#
#   Location for documents for the primary server host. Routes and virtual
#   hosts may define their own document root.
#
Documents web

#
#   Select the type of authentication password store. Select "system" for the default
#   system password store. Currenly only support Unix PAM. Set to "config" for the
#   file-based password store in auth.conf.
#
#   AuthStore system

#   
#   Authorization directives. You can add these directives to apply to the entire
#   server and all routes after this point. Alternatively, put inside a VirtualHost
#   or Route block to localize to that block. By convention, the auth.conf file
#   contains User and Role definitions. This can be used when using the "config" auth
#   store to provide users, passwords and roles. If using the "system" store, it
#   can be used to map user groups to Appweb roles and abilities.
#
#   include auth.conf

#
#   Route unauthenticated traffic over SSL.
#   SECURITY NOTE: The authentication type of "basic" or "form" should
#   only ever be employed over a secure SSL connection. Otherwise, the 
#   plain-text password will be sent in the clear over the network.
#
#   Redirect secure

#
#   This will force browsers to insist on TLS connections only for one year
#
#   Strict-Transport-Security max-age=31536000; includeSubDomains

#
#   Form-based authentication. The realm is required if not using PAM password
#   stores. This redirects unauthenticated accesses to https /admin/login.esp 
#   which is a login form The /login url is used to process a posted with 
#   username and password fields. For more details, see:
#   http://embedthis.com/products/appweb/doc/guide/appweb/users/authentication.html.
#
#   AuthType form example.com https:///admin/login.esp https:///login /logout /home.html

#
#   Location of the mime translation file to map content types to file 
#   extensions. For other types, you can use AddType.  
#   "AddType application/x-appweb-other other"
#
#   TypesConfig mime.types

#
#   Search path for dynamically loadable modules. If modules have been 
#   statically linked into Appweb, this directive and LoadModule directives
#   will be ignored. This directive must be before any LoadModule directives.
#   The default path is: dir-containing-executable : /usr/lib/appweb/bin
#   Use ";" as a separator on windows.
#
#   LoadModulePath "/directory/to/modules:/other/directory"

LoadModulePath "../../${PLATFORM}/bin"

#
#   Notes on the request processing pipeline. The pipeline consists of a set 
#   of stages comprised of a handler, possible filters and one network 
#   connector. 
#
#   The request processing pipeline can be configured at various levels: 
#   globally, virtual hosts and location blocks. At each level, a set of 
#   processing stages can be defined. Inner levels inherit the pipeline from 
#   the outer levels. The pipeline can be reset at a level by using 
#   "Reset pipeline". Each stage may be defined for all requests or only for a 
#   specific file extension or location path prefix.
#
#   If you use the AddConnector, AddFilter or AddHandler directives, the 
#   stage is defined for both input and output processing. For filters you can
#   use AddInputFilter AddOutputFilter directives to define for a single 
#   direction.
#
#   Multiple handlers can be defined, but only the first matching handler will
#   be activated when a request is processed.
#

#
#   Enable the uploadFilter if you want Appweb to transparently accept upload
#   data. Handlers receive form variables that refer to the uploaded file. 
#   Most PHP apps require the uploadFilter to be disabled.
#   SECURITY NOTE: Check the LimitUpload to cap the maximum upload. 
#   SECURITY NOTE: Good to use the upload filter inside a route.
#
#   <Route /upload-uri>
#       AddInputFilter uploadFilter
#       UploadDir /tmp
#       UploadAutoDelete on
#       LimitUpload 200MB
#   </Route>

#
#   Select the fileHandler for static files and as a catch-all when all other 
#   handlers fail.
#
AddHandler fileHandler html gif jpeg jpg png pdf ico css js  ""

#
#   For CGI scripts, such as your Perl scripts make sure that you have 
#   "#!/PerlPath" as the first line. This works on Windows as well.
#   The .bat and .cmd extensions are really only for Windows.
#   
<if CGI_MODULE>
    LoadModule cgiHandler libmod_cgi
    #
    # WARNING: for information about CGI security, read:  http://www.w3.org/Security/faq/wwwsf4.html
    #
    AddHandler cgiHandler exe cgi cgi-nph out bat cmd pl py

    ScriptAlias /cgi-bin/ "$DOCUMENT_ROOT/../cgi-bin"

    #
    #   These actions specify the program to run for each Perl or Python 
    #   script. They map to the extensions specified in the mime.types for for 
    #   these mime types. Alternatively, you may use put all your scripts in 
    #   the subdirectories specified by the releavant Route blocks below.
    #   For perl and python, you can also put "#!/path/to/program" as the first 
    #   line. This works on Windows as well. The .bat and .cmd extensions are 
    #   really only for Windows. For Windows, update the program paths with
    #   the right paths.
    #   
    Action application/x-perl /usr/bin/perl
    Action application/x-python /usr/bin/python
    Action application/x-lua /usr/bin/lua
    Action application/x-ruby /usr/bin/ruby

    CgiPrefix CGI_
    CgiEscape on
    LimitProcesses 10
<else>
    AddHandler errorHandler exe cgi cgi-nph out bat cmd pl py
</if>

#
#   Directory listings. This provides a HTML directory list of the directory
#   corresponding to the URI.
#   SECURITY: This enables attackers to read directory contents.
#   SECURITY: Do not do this outside a scoping route.
#
#   <if DIR_MODULE>
#       <Route /URI-to-list>
#           Options Indexes
#           IndexOrder ascending name
#           IndexOptions FancyIndexing FoldersFirst
#       </Route>
#   </if>

#
#   Enable the action handler for simple URI to "C" bindings
#   This is used by the web-form Auth mechanism
#
<Route ^/action/>
    SetHandler actionHandler
</Route>

<if EJS_MODULE>
    LoadModule ejsHandler libmod_ejs
    AddHandler ejsHandler ejs es

    #
    #   Define the ejs startup script
    #
    #   EjsStartup start.es
    #
    #   Define the default number of workers (threads) to use for ejs requests
    #   Defaults to WorkerLimit
    #
    #   EjsWorkers 10
    #
    #   Define an ejs application. Args are:  Prefix Directory Script Workers
    #
    #   EjsAlias /farm /users/dev/farm /users/dev/farm/start.es 10
    #
    #   Define an ejs application using a location block instead of EjsAlias
    #
    #    <Route /myfarm>
    #        EjsStartup start.es
    #        EjsWorkers 10
    #        Alias /myfarm /User _www
    #        AddHandler fileHandler html gif jpeg jpg png pdf ico css js ""
    #        AddHandler ejsHandler
    #    </Route>
    #
    #   Define an ejs application using a virtual host
    #
    #    <VirtualHost *:4001>
    #        Documents    .
    #        AddHandler   fileHandler html gif jpeg jpg png pdf ico css js
    #        AddHandler   ejsHandler
    #        EjsStartup   farm
    #    </VirtualHost>
<else>
    AddHandler errorHandler ejs es
</if>

<if ESP_MODULE>
    LoadModule espHandler libmod_esp
    AddHandler espHandler esp

    #
    #   Update modified source by automatically recompiling
    #
    EspUpdate on

    #
    #   Send server errors back to the client
    #
    ShowErrors on

    #
    #   Keep intermediate source code in the cache directory
    #
    EspKeepSource on

    #
    #   Route requests from /appName/ to the ESP application under directory. 
    #   Set routePackage to "simple", "mvc" or "restful". Set database to
    #   provider://database. E.g. EspApp app . restful mdb://app.mdb
    #
    # <EspApp /appNamePrefix directory routePackage database>
    # </EspApp>

    #
    #   Define a route for the home page
    #
    # EspRoute home GET,POST,PUT ^/$ ${STATIC_DIR}/index.esp
    #
    #   Define a route for static content. The leading "%" means it is a 
    #   pure regular expression and so "$1" can be used to extract the
    #    positional matching sub-expression.
    #
    # EspRoute static GET %^/static/(.*) ${STATIC_DIR}/$1
    #
    #   Define a route for controller/actions
    #
    # EspRoute default GET,POST ^/{controller}(~/{action}~) ${controller}-${action} ${controller}.c
    #
    #   Define of restful routes for a resource (singleton)
    #   Use LogRoutes to see the routes added.
    #
    # EspResource name ...
    
    #
    #   Define of restful routes for a group of resources (multiple)
    #   Use LogRoutes to see the routes added.
    #
    # EspResourceGoup name ...
    #
    #   Define a set of routes. Possible arguments are "simple", "mvc" and restful". 
    #   Use LogRoutes to see the routes added.
    #
    # EspRouteSet restful
    #
    #   Dynamically loaded controller. The source code in sample.c will be automatically compiled and loaded. 
    #   Source code for sample.c:
    #
    #   ESP_EXPORT int esp_module_sample(HttpRoute *route, MprModule *module) {                                
    #       //  Bound to http://IP/mytest/ACTION
    #       espDefineAction(route, "mytest-ACTION", action);
    #       return 0;
    #   }
    #
    #   <Route ^/sample/{action}$>
    #       AddHandler espHandler
    #       Source     sample.c
    #       Target     run mytest-$1        # URI pattern is http://IP/mytest/ACTION
    #   </Route>
    #
    #   Show the route table in the log
    #
    # LogRoutes

<else>
    AddHandler errorHandler esp
</if>

<if PHP_MODULE>
    LoadModule phpHandler libmod_php
    AddHandler phpHandler php
<else>
    AddHandler errorHandler php
</if>

#
#   Add the trace method if required
#
#   Methods add TRACE

#
#   WARNING: this will enable the PUT and DELETE methods to upload and remove 
#   documents. Only do this inside routes intended for that purpose.
#
#   <Route /puttable>
#       Documents ./modifyable
#       PutMethod on
#   </Route>

#
#   Set a default response cache lifespan
#
Cache 1day 

#
#   Session state duration.
#
SessionTimeout 30mins

#
#   Set the cookie name and determine if the cookie is visible to Javascript
#   (default is httponly, invisible to scripts). Making cookies visible
#   increases the XSS potential.
#
#   SessionCookie name=NAME visible=false

#
#   Maximum duration to parse the request headers
#
RequestParseTimeout 5sec

#
#   Maximum request duration.
#
RequestTimeout 10mins

#
#   Maximum request and connection inactivity duration
#
InactivityTimeout 1min

#
#   Request timeout when appweb is terminating or restarting
#
ExitTimeout 30secs

#
#   Maximum number of worker threads in the Appweb worker pool. Must have at 
#   least one.  One thread will effectively single-thread the server. Appweb 
#   will automatically adjust the number of workers between the minimum 
#   specified by the MinWorkers and the maximum specified here. Every ten 
#   minutes, Appweb will prune workers that have been idle for five minutes. 
#   Appweb has two non-worker threads: one for the master event loop and one 
#   for the garbage collector. So the total number of Appweb threads will be 
#   two plus the number of active workers.
#
LimitWorkers 4

#
#   Minimum number of worker threads. Pre-start and always preserve this 
#   number of workers threads.
#
#   MinWorkers 5

#
#   Memory allocation error policy. This defines what Appweb will do if 
#   the memory limit defined by LimitMemory is exceeded. Choose from "continue" 
#   to prune non-critical response cache and session state, but continue on.
#   This make the memory limit a soft limit.  Or select "restart" to do a
#   graceful shutdown and then appman will restart appweb.
#
MemoryPolicy restart

#
#   Maximum buffer size for pipeline queues
#
LimitBuffer 32K

#
#   Maximum application memory. Invokes MemoryPolicy if exceeded.
#    Redline at 95%.
#
LimitMemory 100MB

#
#   Maximum cache size for response caching and sessions
#
LimitCache 10MB

#
#   Maximum item size that can be cached
#
LimitCacheItem 200K

#
#   Maximum number of total client connections.
#
LimitConnections 50


#
#   Maximum number of simultaneous client systems. Set to zero for unlimited.
#
LimitClients 20

#
#   Maximum number of open files/sockets on unix systems. 
#   Set to zero for the maximum possible value. 
#
LimitFiles 0

#
#   Maximum number of simultaneous requests per client. This helps prevent denial of service attacks.
#
LimitRequestsPerClient 20

#
#   Number of HTTP requests to accept on a single TCP/IP connection
#   Reduce this number to minimize the chance of DoS attacks.
#
LimitKeepAlive 200

#
#   Maximum size of the total request content body (includes header)
#  
LimitRequestBody 2MB

#
#   Maximum size of a request form
#  
LimitRequestForm 32K

#
#   Maximum size of request header
#  
LimitRequestHeader 32K

#
#   Maximum number of request header lines 
#  
LimitRequestHeaderLines 64

#
#   Maximum size of the maximum response body
#  
LimitResponseBody 2GB

#
#   Maximum response chunk size
#
LimitChunk 64K

#
#   Maximum request URI size
#
LimitUri 8K

#
#   WARNING: Change this very carefully. Typically operating systems with
#   virtual memory can effectively allocate the stack size. Systems with 
#   non-virtual memory may need to define this.
#   ThreadStack 64K

#
#   Cache these extensions at the client for 1day.
#   Clients will refresh only if content is stale in their local cache.
#   This causes Expires/Cache-Control headers to be generated.
#
#       Cache client=1day extensions="html,gif,jpeg,jpg,png,pdf,ico,js"
#
#   Cache at the server with a lifespan of one hour.
#   All requests with the same URI path, regardless of request params are
#   cached as one.
#
#       Cache server=1hour /cache.esp /cache.php /cache.ejs /cache.cgi

#
#   To define a document to present for errors. If the URI is local the
#   error document will be served with the original status code. If the URI
#   is not local (starts with http), then a redirect (302) status code will
#   be used to redirect the client to the error document.
#   Note: Failing ejs requests will always redirect.
#
#       ErrorDocument 404 /notFound.html
#
#   Other useful directives
#
#       Redirect temp /pressRelease.html https://${request:serverName}/fixedPressRelease.html
#       Redirect temp /pressRelease.html /fixedPressRelease.html
#       Redirect 410 /membersOnly 
#       AddLanguage en english
#       AddLanguageRoot en englishContentDir
#       DefaultLanguage fr
#       StreamInput [!] mimeType URI
#       TypesConfig "mime.types"
#
#   Create a virtual host
#
#       Listen 5000
#       <VirtualHost *:5000>
#           Documents web
#       </VirtualHost>
#
#   Useful Route directives
#
#   <Route /pattern>
#       # Restrict the permissible methods. Default is to allow all methods sans DELETE, PUT, TRACE.
#       # Also see TraceMethod and PutMethod directives
#       Methods POST        
#   </Route>
#
#   Serve gziped files if an equivalent file with a "*.gz" extension exists
#       Map compressed
#
#   WebSockets with an ESP handler
#
#   <Route ^/websockets/{controller}/{action}$>
#       Prefix /websockets
#       AddFilter               webSocketFilter
#       AddHandler              espHandler
#       Source                  websockets.c
#       Target                  run $1-$2
#
#       # Optimal to have the frame limit smaller than the packet limit. This way complete frames can be transferred.
#       # The Frame limit is a soft limit and can be exceeded. Outgoing messages are broken into frames of this size.
#
#       LimitWebSockets         50
#       LimitWebSocketsMessage  2GB
#       LimitWebSocketsPacket   8K
#       LimitWebSocketsFrame    4K
#       RequestTimeout          2days
#       InactivityTimeout       1hour
#       WebSocketsProtocol      chat
#       WebSocketsPing          30sec
#       IgnoreEncodingErrors    on
#       # PreserveFrames        off                                                                                  
#   </Route>
#
#   Emergency DOS protection
#   If under attack, these directives may be useful
#
#       Deny IPaddr-or-hosts
#       LimitRequestsPerClient 10
#       LimitParseTimeout 2sec
#       LimitKeepAlive 20
#       InactivityTimeout 15sec
#
#   Include per-app configuration
#
Include apps/*.conf

#
#   Debug
#
#   LogRoutes
