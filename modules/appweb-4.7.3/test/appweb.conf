#   appweb.conf -- Appweb unit testing configuration
#
#   WARNING: Do not use this appweb.conf as a sample for your application. It configures everything big, 
#   including: all handlers, filters, caching, limits, hosts and many applications. The result is a very, 
#   very large single web server to test everything. Have a look at src/server/appweb.conf and use that 
#   as the base for your applications.
#   

ErrorLog                stdout level=1
Log                     rx conn=5 first=2 headers=3 body=5 limits=5 size=10K exclude="jpg,gif,png,ico,css,js"
Log                     tx first=3 headers=3 body=5 limits=5 time=6 size=10K exclude="jpg,gif,png,ico,css,js"

Listen                  127.0.0.1:4100      # <HTTPv4>
Listen                  127.0.0.1:4101
<if IPv6>
Listen                  [::1]:4100          # <HTTPv6>
</if>

Documents               web
Cache                   1hour
ExitTimeout             10secs
RequestParseTimeout     30secs
InactivityTimeout       20secs
RequestTimeout          40min
SessionTimeout          30secs

MemoryPolicy            restart
LimitMemory             300MB

LimitBuffer             32K
LimitCache              1MB
LimitCacheItem          512K
LimitChunk              128K
LimitClients            20
LimitConnections        200
LimitFiles              0
LimitKeepAlive          400
LimitProcesses          100
LimitRequestsPerClient  200
LimitRequestBody        64MB
LimitRequestForm        32K
LimitRequestHeader      128K
LimitRequestHeaderLines 128 
LimitResponseBody       6GB
LimitSessions           1000
LimitUpload             1GB
LimitUri                64K
LimitWorkers            10

UploadAutoDelete        on

AddInputFilter          uploadFilter
AddHandler              fileHandler html gif jpeg jpg png pdf ico css js txt ""

<if DIR_MODULE>
    Options Indexes
    IndexOrder ascending name
    IndexOptions FancyIndexing FoldersFirst
</if>

<if EJS_MODULE>
    LoadModule ejsHandler libmod_ejs
    # UnloadModule ejsHandler 60
    AddHandler ejsHandler ejs es
    # EjsStartup start.es
<else>
    AddHandler errorHandler ejs es
</if>

#
#   Sample for how to add an Ejscript application. 
#   This maps the URI "/junk" to the application in the ./junk directory using the
#   junk/start.es script to respond to requests. Up to ten workers may be used by this app.
#
#   EjsAlias /junk ./junk junk/start.es 10


#
#   Enable the action handler for simple URI to "C" bindings
#   This is used by the web-form Auth mech
#
<Route ^/action/>
    SetHandler actionHandler
</Route>

<if PHP_MODULE>
    LoadModule phpHandler libmod_php
    AddHandler phpHandler php
<else>
    AddHandler errorHandler php
</if>

<if ESP_MODULE>
    LoadModule espHandler libmod_esp
    # UnloadModule espHandler 60
    AddHandler espHandler esp
    AddHandler espHandler xesp
    EspUpdate on
    EspKeepSource on
    ShowErrors off

    EspApp name="blog" prefix="/html" dir="apps/esp-html-mvc" routes="esp-html-mvc"
    EspApp name="legacy" prefix="/legacy" dir="apps/legacy-mvc" routes="esp-legacy-mvc" database="mdb://test.mdb"

    # <Reroute ^/catalog/do/{controller}/stream>
    #     RequestTimeout          1hr
    #     InactivityTimeout       2mins
    # </Reroute>

    #
    #   Minimal controller. Not used by the unit test framework
    #
    <Route ^/greetings/{action}$>
        SetHandler espHandler
        Source     apps/greetings/greetings.c
        Target     run greetings-$1
    </Route>
    
    # <Route ${inherit}/sub>
        # EspRoute name="/app/sub/default" methods="GET" prefix="^/sub/{controller}/{action}" target="${controller}-${action}" source="${controller}.c"
        # EspRouteSet restful
        # EspResource sys mid
        # EspResource user, system
        # EspResourceGroup post
    # </Route>

    #
    #   Stand-alone controller. Dynamically recompiled and loaded. Used by stress/post.tst
    # 
    <Route ^/solo/{action}$>
        Prefix     /solo
        AddHandler espHandler
        Source     apps/solo/solo.c
        Target     run solo-$1
    </Route>

    EspRoute prefix="^/session/{action}$" source="apps/session/session.c" target="session-$1" methods="GET,POST"
    
<else>
    AddHandler errorHandler esp
</if>

<if CGI_MODULE>
    LoadModule cgiHandler libmod_cgi
    AddHandler cgiHandler exe cgi cgi-nph bat cmd pl py
    CgiPrefix "CGI_"
    # CgiEscape on
    ScriptAlias /cgi-bin/ "${HOME}/cgi-bin/"
    Action application/x-perl /usr/bin/perl
    Action application/x-python /usr/bin/python
    Action application/x-lua /usr/bin/lua
    Action application/x-ruby /usr/bin/ruby
    Action application/x-php /usr/local/bin/php-cgi
<else>
    AddHandler errorHandler exe cgi cgi-nph bat cmd pl py
</if>

#
#   Test route pattern matching
#   The {2} means match exactly 2 of the previous character
<Route ^/route/(user|admin)/{cmd}/[^a-z]\{2}(\.[hH][tT][mM][lL])$>
    Name route/fullpat.tst
    Target write 200 "${cmd}"
</Route>

<Route ^/route/tokens/{cmd}$>
    Name token.tst
    Target write 200 "${cmd}-${request:query}"
</Route>

<Route ^/route/optional/{controller}(~/{action}~) >
    Name route/optional.tst
    Target write 200 "${controller}-${action}"
</Route>

<if PHP_MODULE>
    <Route ^/route/missing-ext/((?!\.php).*)$>
        Name route/missing.tst
        Prefix /route/missing-ext
        SetHandler phpHandler
        Condition exists ${request:filename}
        Target run $1.php
    </Route>
</if>

include   auth.conf

<Route ^/route/auth>
    Name route/auth.tst
    Prefix /route/auth
    Documents "${DOCUMENTS}/auth/basic"
    AuthType basic example.com
</Route>

#
#   Language tests
#
<Route ^/lang/root>
    Prefix /lang/root
    Name lang/root.tst
    AddLanguageDir en english
</Route>

<Route ^/lang/suffix>
    Name lang/suffix.tst
    Prefix /lang/suffix
    AddLanguageSuffix en en before
</Route>

<Route ^/lang/target/(.*)(\.html)$>
    Name lang/target.tst
    Prefix /lang/target
    AddLanguageSuffix en en 
    Target run $1.${request:Language=ge}$2
</Route>

<Route ^/lang/default/(.*)(\.html)$>
    Name lang/default.tst
    Prefix /lang/default
    AddLanguageSuffix fr fr 
    DefaultLanguage fr
    Target run $1.${request:Language}$2
    # Target run ${DOCUMENTS}/$1.${request:Language}$2
</Route>

<Route ^/lang/catchall>
    Name lang/catchall.tst
    Prefix /lang/catchall
    AddLanguageSuffix "" en before
</Route>

#
#   Header and Param tests
#
<Route ^/route/header>
    Name route/header.tst
    RequestHeader User-Agent custom
    Target write 200 "${header:User-Agent}"
</Route>

<Route ^/route/param>
    Name route/param.tst
    Param name peter
    Target write 200 "${param:name}"
</Route>

#
#   Condition tests
#
<Route ^/route/cond>
    Name route/cond.tst
    Condition ! match ${request:scheme} "(https|custom)" 
    Target write 200 "${request:scheme}"
</Route>

#
#   Updates
#
<Route ^/route/update/cmd>
    Name route/cmd.tst
    Update cmd "touch route-update-cmd.tmp"
    Target write 200 "${request:error}UPDATED"
</Route>

<Route ^/route/update/var>
    Name route/var.tst
    Update param from ${header:from}
    Target write 200 "${param:from}"
</Route>

#
#   Misc
#
<Route ^/compress/>
    Name compress/gzip.tst
    # Compress gzip
    Map compressed
</Route>

#
#   Enable PUT|DELETE
#
<Route ^/tmp/>
    Documents web/tmp
    Prefix /tmp
    Methods add DELETE PUT OPTIONS
    SetHandler fileHandler
</Route>

#
#   Enable TRACE and options
#
<Route ^/trace/>
    Prefix /trace
    Methods add OPTIONS, TRACE
</Route>

#
#   Stealth mode
#
<Route ^/liberal/>
    Prefix /liberal
    Stealth off
    SessionCookie visible=true
    Header remove Content-Security-Policy
    Header remove X-Frame-Options
    Header remove X-XSS-Protection
    Header remove X-Content-Type-Options
    # Header set Content-Security-Policy "allow 'self'; unsafe-inline; img-src 'self'
</Route>


#
#   Sample to restrict to specific named methods
#
<Route ^/get>
   Prefix /get
   Methods set GET, OPTIONS
</Route>

<Route ^/cache/{action}$>
    AddHandler espHandler
    Source     apps/cache/cache.c
    Target     run cache-$1
    Cache 1day
    Cache server manual /cache/manual
    Cache server /cache/small /cache/big /cache/huge
    Cache client=1hr /cache/client
    # Limit to prevent huge being cached
    LimitCacheItem 100000
</Route>

#
#   Test caching modes: all, unique, only
#
<Route ^/only/>
    Prefix /only
    Documents web/caching 
    # Cache these exact URIs with request params
    Cache client=30mins server=1day /cache.esp?esp=1&prefix=/only /cache.php?php=1&prefix=/only /cache.ejs?ejs=1&prefix=/only
</Route>
<Route ^/combined/>
    Prefix /combined
    Documents web/caching 
    # Cache these URIs with any request params combined into one item per URI
    Cache server=1day /cache.esp /cache.php /cache.ejs /cache.cgi
</Route>
<Route ^/unique/>
    Prefix /unique
    Documents web/caching 
    # Cache each URI+params uniquely
    Cache server=1day unique /cache.esp /cache.php /cache.ejs /cache.cgi
</Route>
<Route ^/ext/>
    Prefix /ext
    Documents web/caching 
    Cache server extensions="esp"
</Route>
<Route ^/types/>
    Prefix /types
    Documents web/caching 
    Cache server types="application/x-php"
</Route>
<Route ^/methods/>
    Prefix /methods
    Documents web/caching 
    Cache server methods="POST"
</Route>

## AccessLog access.log size=1MB append anew

# Re-open the existing command route and add caching
<Route ^/legacy/{controller}/{action}$>
    ##  # Note: /cache is the controller name
    ##    Cache 1day
    ##    Cache server manual /cache/manual
    ##    Cache server all /cache/small /cache/big /cache/huge
    ##    Cache client=1hr /cache/client
    ##    # Limit to prevent huge being cached
    ##    LimitCacheItem 100000
    ##  FUTURE - is this used?
    CrossOrigin origin=* credentials=yes headers=X-CORS-HEADER age=3000
</Route>

Alias /SimpleAlias "${DOCUMENTS}"
Alias /aliasDir/ ${DOCUMENTS}/alias/
Alias /aliasFile ${DOCUMENTS}/alias/atest.html
Alias /AliasDocs/ "${DOCUMENTS}/My Documents/"

<if CGI_MODULE>
    ScriptAlias /MyScripts/ "${HOME}/cgi-bin/"
    ScriptAlias /YourScripts/ "${DOCUMENTS}/"
</if>

#
#   Routes with basic, digest and form-based  authentication
#
<Route ^/auth/basic/>
    AuthType basic example.com
    <Route ^/auth/basic/executive/>
        Require role executive
    </Route>
    <Route ^/auth/basic/joshua/>
        Require user joshua
    </Route>
</Route>
<Route ^/auth/blowfish/>
    AuthType basic example.com
    Require user ralph
</Route>
<Route ^/auth/digest/>
    AuthType digest example.com
    <Route ^/auth/digest/executive/>
        Require role executive
    </Route>
    <Route ^/auth/digest/joshua/>
        Require user joshua
    </Route>
</Route>

<Route ^/auth/form/>
    AuthType form example.com https:///auth/form/login.esp https:///auth/form/login /auth/form/logout /auth/form/index.html
</Route>

#
#   Test error documents
#
<Route ^/error/>
    # Remote URIs and Ejscript will redirect with a 302 status code
    ErrorDocument 404 /notFound.esp
</Route>

#
#   Test simple redirections
#
Redirect temp ^/old.html /index.html
Redirect 410 ^/membersOnly

#
#   WebSockets unit test
#
<Route ^/websockets/{controller}/{action}$>
    Prefix /websockets
    Reset                   pipeline
    AddFilter               webSocketFilter
    AddHandler              espHandler
    Source                  apps/websockets/websockets.c
    Target                  run $1-$2
    LimitWebSockets         25
    LimitWebSocketsMessage  10MB
    LimitWebSocketsPacket   8K
    LimitWebSocketsFrame    4K
    RequestTimeout          1hr
    InactivityTimeout       2mins

#   WebSocketsProtocol      chat
#   WebSocketsPing          30secs
#   IgnoreEncodingErrors    on
#   PreserveFrames          on
</Route>

#
#   Autobahn WebSockets test suite
#
<Route ^/autobahn/{controller}/{action}$>
    Prefix /autobahn
    Reset                   pipeline
    AddFilter               webSocketFilter
    AddHandler              espHandler
    Source                  apps/websockets/websockets.c
    Target                  run $1-$2
    LimitWebSockets         20
    LimitWebSocketsMessage  40MB
    LimitWebSocketsPacket   40MB
    LimitWebSocketsFrame    8K
    RequestTimeout          1min
    InactivityTimeout       30secs
</Route>

#
#   Defensive counter-measures
#
#   System-Wide Counters: 
#       - ActiveClients, ActiveConnections, ActiveRequests, ActiveProcesses, Memory
#   Per-Client Counters:
#       - BadRequestErrors, Errors, LimitErrors, NetworkIO, NotFoundErrors, Requests, SSLErrors
#   Remedies: 
#       - ban, cmd, delay, email, http, log
#   Tokens: 
#       - CMD, DELAY, FROM, IP, MESSAGE, PERIOD, STATUS, SUBJECT, TO, METHOD, URI
#   Examples:
#	    Defense block REMEDY=ban PERIOD=30mins
#       Defense report REMEDY=http URI=http://example.com/report
#	    Defense alarm REMEDY=cmd CMD="afplay klaxon.mp3"
#	    Defense slow REMEDY=delay PERIOD=10mins DELAY=1sec
#	    Defense fix REMEDY=cmd CMD="${MESSAGE} | sendmail admin@example.com"
#       Defense notify REMEDY=email TO=info@example.com
#       Defense firewall REMEDY=cmd CMD="iptables -A INPUT -s ${IP} -j DROP"
#       Defense reboot REMEDY=restart 
#
#   Monitor/Defense test: Ban any client that issues more than 190 requests in a 5 second period. Ban for 5 secs.
#   WARNING: Normally, should not have such a short period on the monitor as it will wake the server every 5 secs.
#   NOTE: one monitor per counter
#   This is not part of the default unit tests. Must be run manually.
#
Defense deny REMEDY=ban STATUS=406 MESSAGE="Client temporarily banned due to monitored limit exceeded" PERIOD=5secs
Monitor "NotFoundErrors > 190" 5sec deny

#
#   Appweb documentation
#
<Route ^/doc/>
    Documents ${HOME}/../doc
    Prefix /doc
</Route>

<Route ^/secure-only>
    Prefix /secure-only
    # Set Strict-Transport-Security max-age and whether subDomains should be included
    Require secure age=30days domains
</Route>

<Route ^/dirlist/>
    Prefix /dirlist
</Route>

<if SSL_MODULE>
    LoadModule sslModule libmod_ssl

    #
    #   Define the TLS endpoint without requiring a virtual host
    #
    ListenSecure 127.0.0.1:4443         # <HTTPSv4>

    SSLCACertificateFile    "crt/ca.crt"        # For client-cert verification (signed test.crt)
    SSLCertificateFile      "crt/test.crt"
    SSLCertificateKeyFile   "crt/test.key"

    #   
    #   Virtual hosts for SSL certificate tests
    #
    <VirtualHost *:5443>
        ListenSecure 127.0.0.1:5443     # <SELFCERT>
        # SSLProvider est
        SSLCertificateFile    "crt/self.crt"
        SSLCertificateKeyFile "crt/self.key"
    </VirtualHost>

    <VirtualHost *:6443>
        ListenSecure 127.0.0.1:6443     # <CLIENTCERT>
        # SSLProvider est
        SSLVerifyClient on
        # Not required to set cipher suite. Just testing it works.
        # SSLCipherSuite  TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_RC4_128_SHA

        <Route /ssl-match>
            Prefix /ssl-match
            Condition match ${ssl:CLIENT_S_CN} "localhost|example.com"
        </Route>
        # Condition match ${ssl:state} "CN=localhost," 

    </VirtualHost>

    #
    #   Provider specific virtual hosts
    #
    <VirtualHost *:7443>
        ListenSecure 127.0.0.1:7443     # <OPENSSL>
        SSLProvider openssl
        SSLCipherSuite AES128-SHA       # HIGH:RC4+SHA
        SSLVerifyClient on
    </VirtualHost>

    <VirtualHost *:8443>
        ListenSecure 127.0.0.1:8443     # <MATRIXSSL>
        SSLProvider matrixssl
        SSLVerifyClient on
    </VirtualHost>

    <VirtualHost *:9443>
        ListenSecure 127.0.0.1:9443     # <NANOSSL>
        SSLProvider nanossl
        SSLVerifyClient off
    </VirtualHost>
</if>

Listen 127.0.0.1:4200                   # <NAMED>
NameVirtualHost *:4200
<VirtualHost *:4200>
    ServerName  localhost:4200
    Documents   "${HOME}/web/vhost/namehost1"
</VirtualHost>

<VirtualHost *:4200>
    ServerName  *embedthis
    Documents   web
</VirtualHost>

<VirtualHost *:4200>
    ServerName 127.0.0.1:4200
    Documents "${HOME}/web/vhost/namehost2"
    Reset pipeline
    AddHandler fileHandler html gif jpeg jpg png pdf ico css js ""
    <if EJS_MODULE>
        AddHandler ejsHandler ejs
        DirectoryIndex index.ejs
    <else>
        AddHandler errorHandler ejs
    </if>
</VirtualHost>

#
#   IP virtual host
#
Listen 127.0.0.1:4300             # <IPHOST>
<VirtualHost *:4300>
    Documents "${HOME}/web/vhost/iphost"
    AuthType basic example.com
    Require user mary
</VirtualHost>

#
#   Virtual host for CrossOrigin
#
Listen 127.0.0.1:4400
<VirtualHost *:4400>
    Documents   web
</VirtualHost>

# LogRoutes 
